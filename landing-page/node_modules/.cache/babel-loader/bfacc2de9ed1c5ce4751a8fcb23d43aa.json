{"ast":null,"code":"import _regeneratorRuntime from\"/Users/rexardiente/Development/Github/coinica-sites/landing-page/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/rexardiente/Development/Github/coinica-sites/landing-page/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import detectEthereumProvider from'@metamask/detect-provider';import Web3 from\"web3\";export var getProvider=function getProvider(){return detectEthereumProvider();};export var ethEnabled=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!window.ethereum){_context.next=11;break;}_context.prev=1;_context.next=4;return window.ethereum.request({method:'eth_requestAccounts'});case 4:window.web3=new Web3(window.ethereum);return _context.abrupt(\"return\",true);case 8:_context.prev=8;_context.t0=_context[\"catch\"](1);return _context.abrupt(\"return\",false);case 11:return _context.abrupt(\"return\",false);case 12:case\"end\":return _context.stop();}}},_callee,null,[[1,8]]);}));return function ethEnabled(){return _ref.apply(this,arguments);};}();export var disableETH=function disableETH(){if(window.ethereum){try{window.web3=null;return true;}catch(err){return false;}}return false;};export var getAccounts=function getAccounts(params,responseHandler,errorHandler){window.ethereum.request({method:'eth_requestAccounts',params:[{eth_accounts:{}}]}).then(responseHandler).catch(errorHandler);};export var getBalance=function getBalance(params,responseHandler,errorHandler){window.ethereum.request({method:'eth_getBalance',params:params}).then(responseHandler).catch(errorHandler);};export var getTransactionByHash=function getTransactionByHash(params,responseHandler,errorHandler){window.ethereum.request({method:'eth_getTransactionByHash',params:params}).then(responseHandler).catch(errorHandler);};export var sendTransaction=function sendTransaction(params,responseHandler,errorHandler){window.ethereum.request({method:'eth_sendTransaction',params:params}).then(responseHandler).catch(errorHandler);};export var getChainId=function getChainId(params,responseHandler,errorHandler){window.ethereum.request({method:'eth_chainId',params:params}).then(responseHandler).catch(errorHandler);};export var onAccountChange=function onAccountChange(callback){window.ethereum.on('accountsChanged',callback);};export var onChainChange=function onChainChange(callback){window.ethereum.on('chainChanged',callback);};","map":{"version":3,"sources":["/Users/rexardiente/Development/Github/coinica-sites/landing-page/src/services/metamask.js"],"names":["detectEthereumProvider","Web3","getProvider","ethEnabled","window","ethereum","request","method","web3","disableETH","err","getAccounts","params","responseHandler","errorHandler","eth_accounts","then","catch","getBalance","getTransactionByHash","sendTransaction","getChainId","onAccountChange","callback","on","onChainChange"],"mappings":"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","sourcesContent":["import detectEthereumProvider from '@metamask/detect-provider';\nimport Web3 from \"web3\";\n\nexport const getProvider = () => {\n  return detectEthereumProvider();\n}\n\nexport const ethEnabled = async () => {\n  if (window.ethereum) {\n    try {\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\n      window.web3 = new Web3(window.ethereum);\n      return true;\n    } catch (err) {\n      return false\n    }\n  }\n  return false;\n}\n\nexport const disableETH = () => {\n  if (window.ethereum) {\n    try {\n      window.web3 = null;\n      return true;\n    } catch (err) {\n      return false\n    }\n  }\n  return false;\n}\n\nexport const getAccounts = (params, responseHandler, errorHandler) => {\n  window.ethereum\n    .request({\n      method: 'eth_requestAccounts',\n      params: [\n        {\n          eth_accounts: {}\n        }\n      ]\n    })\n    .then(responseHandler)\n    .catch(errorHandler);\n}\n\nexport const getBalance = (params, responseHandler, errorHandler) => {\n  window.ethereum\n    .request({\n      method: 'eth_getBalance',\n      params\n    })\n    .then(responseHandler)\n    .catch(errorHandler);\n}\n\nexport const getTransactionByHash = (params, responseHandler, errorHandler) => {\n  window.ethereum\n    .request({\n      method: 'eth_getTransactionByHash',\n      params\n    })\n    .then(responseHandler)\n    .catch(errorHandler);\n}\n\nexport const sendTransaction = (params, responseHandler, errorHandler) => {\n  window.ethereum\n    .request({\n      method: 'eth_sendTransaction',\n      params\n    })\n    .then(responseHandler)\n    .catch(errorHandler);\n}\n\nexport const getChainId = (params, responseHandler, errorHandler) => {\n  window.ethereum\n    .request({\n      method: 'eth_chainId',\n      params\n    })\n    .then(responseHandler)\n    .catch(errorHandler);\n}\n\nexport const onAccountChange = (callback) => {\n  window.ethereum.on('accountsChanged', callback);\n}\n\nexport const onChainChange = (callback) => {\n  window.ethereum.on('chainChanged', callback);\n}\n"]},"metadata":{},"sourceType":"module"}